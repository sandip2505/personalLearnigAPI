<%- contentFor('extra_css') %>

  <%- contentFor('content') %>

<style>
  .sb-container {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .sb-header {
    background: #007bff;
    color: white;
    padding: 20px;
    border-radius: 8px 8px 0 0;
    text-align: center;
  }

  .sb-header h1 {
    font-size: 32px;
    text-transform: capitalize;
    margin: 0;
  }

  .sb-header p {
    font-size: 14px;
    color: #ccc;
    opacity: 0.9;
    padding-top: 5px;
  }

  .sb-main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    padding: 20px;
    min-height: 500px;
  }

  .sb-panel {
    background: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
    transition: box-shadow 0.3s;
  }

  .sb-panel:hover {
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  }

  .sb-panel h2 {
    margin-bottom: 15px;
    color: #333;
    font-size: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #007bff;
  }

  .drop-panel.sb-drop-panel {
    min-height: 400px;
    position: relative;
  }

  .sb-drop-panel.sb-drag-over {
    border-color: #007bff;
    background: #e9f5ff;
  }

  .sb-item {
    min-height: 50px;
    background: #fff;
    border: 1px solid #ddd;
    padding: 10px 15px;
    margin: 8px 0;
    border-radius: 4px;
    cursor: grab;
    user-select: none;
    display: flex;
    gap: 10px;
    align-items: center;
    text-transform: capitalize;
    justify-content: space-between;
    transition: border-color 0.3s;
  }

  .sb-item:hover {
    border-color: #007bff;
    background: #f1f8ff;
  }

  .sb-item:active {
    cursor: grabbing;
  }

  .sb-item.sb-dragging {
    opacity: 0.5;
  }

  .sb-dropped-item {
    background: #e8f4fd;
    border-color: #007bff;
  }

  .sb-item-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 15px;
    flex: 1;
  }

  .sb-item-name {
    font-weight: 500;
  }

  .sb-status-dropdown {
    padding: 4px 8px;
    border: 1px solid #ddd;
    border-radius: 3px;
    font-size: 12px;
    background: white;
    cursor: pointer;
    transition: border-color 0.3s;
  }

  .sb-status-dropdown:focus {
    outline: none;
    border-color: #007bff;
  }

  .sb-item-controls {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .sb-remove-btn {
    background: #dc3545;
    border: none;
    color: white;
    border-radius: 3px;
    width: 30px;
    height: 30px;
    cursor: pointer;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: background 0.3s;
  }

  .sb-remove-btn:hover {
    background: #c82333;
  }

  .sb-controls {
    padding: 20px;
    border-top: 1px solid #ddd;
    display: flex;
    justify-content: center;
    gap: 15px;
  }

  .sb-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background 0.3s;
  }

  .sb-btn-primary {
    background: #007bff;
    color: white;
  }

  .sb-btn-primary:hover {
    background: #0056b3;
  }

  .sb-btn-secondary {
    background: #6c757d;
    color: white;
  }

  .sb-btn-secondary:hover {
    background: #545b62;
  }

  .sb-output {
    margin: 20px;
    padding: 15px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-family: monospace;
    white-space: pre-wrap;
    max-height: 300px;
    overflow-y: auto;
  }

  .sb-empty-state {
    text-align: center;
    color: #666;
    font-style: italic;
    margin-top: 50px;
  }

  .sb-item-counter {
    background: #007bff;
    color: white;
    border-radius: 10px;
    padding: 2px 8px;
    font-size: 12px;
    margin-left: 10px;
  }

  .sb-sortable-placeholder {
    background: #e9ecef;
    border: 2px dashed #007bff;
    margin: 8px 0;
    height: 45px;
    border-radius: 4px;
  }

  @media (max-width: 768px) {
    .sb-main-content {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .sb-controls {
      flex-direction: column;
      align-items: center;
    }

    .sb-item-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }
  }
</style>


    <div class="sb-container">
      <form action="/set-page-section" id="sectionForm" method="post"></form>

      <div class="sb-header">
        <h1>
          <%= pageName %>
        </h1>
        <p>Drag items from left to right panel, and reorder selected items by dragging</p>
      </div>
      <div class="sb-main-content">
        <div class="sb-panel sb-source-panel">
          <h2>Available sections</h2>
          <div id="sourceItems">
            <% for (let i=0; i < sections.length; i++) { %>
              <div class="sb-item" draggable="true" data-item='{"id": "<%= sections[i]._id %>"}'>
                <span>
                  <%= sections[i].name %>
                </span>
              </div>
              <% } %>
          </div>
        </div>
        <div class="sb-panel sb-drop-panel drop-panel" id="dropZone">
          <h2>Selected Items <span id="itemCount" class="sb-item-counter">0</span></h2>
          <div id="droppedItems">
            <div class="sb-empty-state">
              Drop items here to add them to your selection<br />
              <small>Drag selected items to reorder them</small>
            </div>
          </div>
        </div>
      </div>
      <div class="sb-controls">
        <button class="sb-btn sb-btn-primary" id="submitBtn">Submit</button>
        <button class="sb-btn sb-btn-secondary" id="clearBtn">Clear All</button>
      </div>
      <div id="output" class="sb-output" style="display: none;"></div>
    </div>

    <script>
      class DragDropManager {
        constructor() {
          this.allItems = <%- JSON.stringify(sections) %>;
          // Ensure each item has dropId and status (done server-side for EJS)
          this.droppedData = <%- JSON.stringify((pageSections || []).map(item => ({
            ...item,
            dropId: item.dropId || (Date.now() + Math.floor(Math.random() * 1000)),
            status: item.status || 'published',
            id: item.id || item.sectionId
          }))) %>;
          this.draggedElement = null;
          this.draggedFromSource = false;
          this.draggedDropId = null;
          this.init();
        }

        init() {
          this.setupDragAndDrop();
          this.setupButtons();
          this.updateCounter();
          this.updateDroppedItemDisplay();
        }

        setupDragAndDrop() {
          const sourceItems = document.querySelectorAll('#sourceItems .sb-item');
          sourceItems.forEach(item => {
            item.addEventListener('dragstart', this.handleSourceDragStart.bind(this));
            item.addEventListener('dragend', this.handleDragEnd.bind(this));
          });

          const dropZone = document.getElementById('dropZone');
          dropZone.addEventListener('dragover', this.handleDragOver.bind(this));
          dropZone.addEventListener('dragenter', this.handleDragEnter.bind(this));
          dropZone.addEventListener('dragleave', this.handleDragLeave.bind(this));
          dropZone.addEventListener('drop', this.handleDrop.bind(this));
        }

        setupButtons() {
          document.getElementById('submitBtn').addEventListener('click', this.handleSubmit.bind(this));
          document.getElementById('clearBtn').addEventListener('click', this.handleClear.bind(this));
        }

        handleSourceDragStart(e) {
          const itemData = e.target.getAttribute('data-item');
          e.dataTransfer.setData('text/plain', itemData);
          e.dataTransfer.effectAllowed = 'copy';
          e.target.classList.add('sb-dragging');
          this.draggedFromSource = true;
        }

        handleDroppedItemDragStart(e, dropId) {
          this.draggedDropId = dropId;
          e.dataTransfer.effectAllowed = 'move';
          e.target.classList.add('sb-dragging');
          this.draggedElement = e.target;
          this.draggedFromSource = false;
        }

        handleDragEnd(e) {
          e.target.classList.remove('sb-dragging');
          this.draggedElement = null;
          this.draggedDropId = null;
          const placeholder = document.querySelector('.sb-sortable-placeholder');
          if (placeholder) placeholder.remove();
        }

        handleDragOver(e) {
          e.preventDefault();
          e.dataTransfer.dropEffect = this.draggedFromSource ? 'copy' : 'move';

          if (!this.draggedFromSource && this.draggedElement) {
            this.handleSortableMove(e);
          }
        }

        handleSortableMove(e) {
          const droppedItems = document.getElementById('droppedItems');
          const afterElement = this.getDragAfterElement(droppedItems, e.clientY);
          let placeholder = document.querySelector('.sb-sortable-placeholder');

          if (!placeholder) {
            placeholder = document.createElement('div');
            placeholder.className = 'sb-sortable-placeholder';
            placeholder.style.height = '45px';
          }

          if (afterElement == null) {
            droppedItems.appendChild(placeholder);
          } else {
            droppedItems.insertBefore(placeholder, afterElement);
          }
        }

        getDragAfterElement(container, y) {
          const draggableElements = [...container.querySelectorAll('.sb-dropped-item:not(.sb-dragging)')];
          return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            if (offset < 0 && offset > closest.offset) {
              return { offset: offset, element: child };
            } else {
              return closest;
            }
          }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        handleDragEnter(e) {
          e.preventDefault();
          document.getElementById('dropZone').classList.add('sb-drag-over');
        }

        handleDragLeave(e) {
          if (!e.currentTarget.contains(e.relatedTarget)) {
            document.getElementById('dropZone').classList.remove('sb-drag-over');
          }
        }

        handleDrop(e) {
          e.preventDefault();
          document.getElementById('dropZone').classList.remove('sb-drag-over');

          const placeholder = document.querySelector('.sb-sortable-placeholder');

          if (this.draggedFromSource) {
            const data = e.dataTransfer.getData('text/plain');
            console.log('Dropped data:', data);
            const itemData = JSON.parse(data);
            this.addDroppedItem(itemData);
          } else if (this.draggedDropId !== null && placeholder) {
            const draggedIndex = this.droppedData.findIndex(item => item.dropId === this.draggedDropId);
            if (draggedIndex === -1) return;

            const draggedItem = this.droppedData[draggedIndex];
            this.droppedData.splice(draggedIndex, 1);

            const allItems = [...document.getElementById('droppedItems').children];
            const placeholderIndex = allItems.indexOf(placeholder);

            let insertIndex = placeholderIndex;
            if (insertIndex > draggedIndex) insertIndex--;

            this.droppedData.splice(insertIndex, 0, draggedItem);
            this.updateDroppedItemDisplay();
          }

          if (placeholder) placeholder.remove();
        }

        addDroppedItem(data) {
          const newItem = {
            ...data,
            dropId: Date.now() + Math.floor(Math.random() * 1000),
            status: 'published' // Default status
          };
          
          this.droppedData.push(newItem);
          this.updateDroppedItemDisplay();
        }

        updateDroppedItemDisplay() {
          const container = document.getElementById('droppedItems');

          if (this.droppedData.length === 0) {
            container.innerHTML = `
              <div class="sb-empty-state">
                Drop items here to add them to your selection<br>
                <small>Drag selected items to reorder them</small>
              </div>
            `;
            this.updateCounter();
            return;
          }

          container.innerHTML = this.droppedData.map((item) => {
            let data = this.allItems.find(i => i._id === item.id);
            return `
              <div class="sb-item sb-dropped-item" draggable="true" data-drop-id="${item.dropId}">
                <div class="sb-item-content">
                  <span class="sb-item-name">${data.name}</span>
                  <select class="sb-status-dropdown sb-status-${item.status}" onchange="dragDropManager.updateItemStatus(${item.dropId}, this.value)">
                    <option value="published" ${item.status === 'published' ? 'selected' : ''}>Published</option>
                    <option value="draft" ${item.status === 'draft' ? 'selected' : ''}>Draft</option>
                    <option value="archived" ${item.status === 'archived' ? 'selected' : ''}>Archived</option>
                  </select>
                </div>
                <div class="sb-item-controls">
                  <button class="sb-remove-btn" onclick="dragDropManager.removeItem(${item.dropId})">×</button>
                </div>
              </div>
            `;
          }).join('');

          const droppedItems = container.querySelectorAll('.sb-dropped-item');
          droppedItems.forEach(item => {
            const dropId = parseInt(item.getAttribute('data-drop-id'));
            
            item.addEventListener('dragstart', (e) => this.handleDroppedItemDragStart(e, dropId));
            item.addEventListener('dragend', this.handleDragEnd.bind(this));
          });

          this.updateCounter();
        }

        updateItemStatus(dropId, newStatus) {
          const item = this.droppedData.find(item => item.dropId === dropId);
          console.log('Updating status for dropId:', this.droppedData);
          if (item) {
            item.status = newStatus;
            // Update the dropdown styling
            const dropdown = document.querySelector(`[data-drop-id="${dropId}"] .sb-status-dropdown`);
            if (dropdown) {
              dropdown.className = `sb-status-dropdown sb-status-${newStatus}`;
            }
          }
        }

        removeItem(dropId) {
          this.droppedData = this.droppedData.filter(item => item.dropId !== dropId);
          this.updateDroppedItemDisplay();
        }

        updateCounter() {
          document.getElementById('itemCount').textContent = this.droppedData.length;
        }

        handleSubmit() {
          const output = document.getElementById('output');
          const form = document.getElementById('sectionForm');

          form.innerHTML = '';

          // if (this.droppedData.length === 0) {
          //   output.style.display = 'block';
          //   output.textContent = 'No items selected. Please drag some items to the drop zone first.';
          //   return;
          // }

          const resultArray = this.droppedData.map((item, index) => {
            const originalData = this.allItems.find(i => i._id === item.id);
            return {
              order: index + 1,
              id: item.id,
              name: originalData.name,
              status: item.status
            };
          });

          resultArray.forEach((item, index) => {
            for (const key in item) {
              const input = document.createElement('input');
              input.type = 'hidden';
              input.name = `sections[${index}][${key}]`;
              input.value = item[key];
              form.appendChild(input);
            }
          });

          const pageId = window.location.pathname.split("/").pop();
          const pageIdInput = document.createElement('input');
          pageIdInput.type = 'hidden';
          pageIdInput.name = 'pageId';
          pageIdInput.value = pageId;
          form.appendChild(pageIdInput);

          output.style.display = 'block';
          output.textContent = `Selected Items Array (in order):\n\n${JSON.stringify(resultArray, null, 2)}\n\nPage ID: ${pageId}`;

          form.submit();
        }

        handleClear() {
          this.droppedData = [];
          this.updateDroppedItemDisplay();
          document.getElementById('output').style.display = 'none';
        }

        getData() {
          return this.droppedData.map((item, index) => {
            const originalData = this.allItems.find(i => i._id === item.id);
            return {
              order: index + 1,
              id: item.id,
              name: originalData.name,
              status: item.status
            };
          });
        }
      }

      const dragDropManager = new DragDropManager();
      window.dragDropManager = dragDropManager;
    </script>

    <%- contentFor('extra_javascript') %>